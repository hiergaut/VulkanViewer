# This is a basic workflow to help you get started with Actions

name: Build Project

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: ${{ matrix.config.name }}
    # The type of runner that the job will run on
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config: 
          - { name: "Windows Latest - MSVC", artifact: "windows-msvc.tar.xz", os: windows-latest, cc: "cl", cxx: "cl"}
          - { name: "Ubuntu Latest - GCC", artifact: "linux-gcc.tar.xz", os: ubuntu-latest, cc: "gcc-9", cxx: "g++-9"}
        #  - { name: "Ubuntu Latest - Clang", artifact: "linux-clang.tar.xz", os: ubuntu-latest, cc: "clang-9", cxx: "clang++-9"}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      
      # install dependencies
      #- name: install dependencies
        #run: sudo apt-get update && sudo apt-get install -yq libxrandr-dev libxinerama-dev libx11-dev
          #libxcursor-dev libxi-dev libgl1-mesa-dev libvulkan-dev
      - name: Windows set ENV
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Linux cache dependencies
        if: runner.os == 'Linux'
        uses: actions/cache@v1.0.3
        id: cache-dependencies
        with:
          path: "~/dependencies"
          key: cache0
     
      - name: Linux install dependencies
        if: runner.os == 'Linux'
        env:
          CACHE_HIT: ${{steps.cache-dependencies.outputs.cache-hit}}
        run: |
          find ~/dependencies/
          if [[ "$CACHE_HIT" == 'true' ]]; then
            sudo cp --force --recursive ~/dependencies/* /
          else
            sudo apt-get update && sudo apt-get install -yq libxrandr-dev libxinerama-dev libx11-dev libxcursor-dev libxi-dev libgl1-mesa-dev libvulkan-dev | tee -a /tmp/tmp.txt
            mkdir -p ~/dependencies
            for installedPkg in $(cat /tmp/tmp.txt | tail -n +$(grep -n NEW /tmp/tmp.txt | awk -F: '{print $1}') | grep '^  '); do
              dpkg -L $installedPkg | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/dependencies/
            done
          fi
          
      # build project
      - name: cmake build
        run: mkdir build && cmake -Bbuild .
      - name: cmake make
        run: cmake --build build --parallel
      
      # run tests
      - name: run test 1
        run: build/src/VulkanViewer
       
      # upload artifact, example binary
      #- name: Upload Example binary
       # uses: actions/upload-artifact@v1
        #with:
         #name: upload binary
         #path: build/src/VulkanViewer
        
